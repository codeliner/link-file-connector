<h2 if="{ isNew }" class="text-center"><?php echo $this->translate('New File Connector') ?></h2>
<h2 if="{ !isNew }" class="text-center">{ connector.name }</h2>
<hr>
<div class="row">
    <div class="col-sm-12 col-md-8 col-md-offset-2">
        <div class="{ form-group: true, text-left: true, has-success: processing_type.value }">
            <label for="processing_type" class="control-label"><?php echo $this->translate('Choose data type for which you want to create a file connector.') ?></label>
            <select name="processing_type" class="form-control" onchange="{ onProcessingTypeChange }">
                <option value="">- <?php echo $this->translate('Data Type') ?> -</option>
                <option each="{ processingTypes }" value="{ value }">{ label }</option>
            </select>
        </div>
        <div class="{ form-group: true, text-left: true, has-success: file_type.value }">
            <label for="file_type" class="control-label"><?php echo $this->translate('Select the type the file will have.') ?></label>
            <select name="file_type" class="form-control" onchange="{ onFileTypeChange }">
                <option value="">- <?php echo $this->translate('File Type') ?> -</option>
                <option each="{ fileType in fileTypes }">{ fileType }</option>
            </select>
        </div>
        <div class="{ form-group: true, text-left: true, has-success: isValidName(), has-error: isDuplicateName() }">
            <label for="name" class="control-label"><?php echo $this->translate('Give your connector a unique name (or use the default)') ?></label>
            <input type="text" name="name" class="form-control" placeholder="Name" onchange="{ onNameChange }" />
            <div if="{ isDuplicateName() }">
                <br>
                <div class="alert alert-danger"><?php echo $this->translate('The connector name is already in use. Please choose another name') ?>!</div>
            </div>
        </div>
        <div class="form-group text-left">
            <label><?php echo $this->translate('For what reason do you need the file') ?>?</label>
            <br>
            <button class="{ btn: true, btn-success: readable, btn-default: !readable, active: readable }" onclick="{ toggleReadable }"><?php echo $this->translate('import data') ?></button>&nbsp;&nbsp;&nbsp;
            <button class="{ btn: true, btn-success: writable, btn-default: !writable, active: writable }" onclick="{ toggleWritable }"><?php echo $this->translate('export data') ?></button>
        </div>
        <hr>
        <div class="row">
            <div class="col-md-12">
                <div class="pull-right">
                    <a href="#connectors" class="btn btn-default"><?php echo $this->translate('Cancel')?></a>&nbsp;&nbsp;
                    <button class="{ btn: true, btn-success: true, disabled: !isValid() }" onclick="{ saveConnector }"><?php echo $this->translate('Save')?></button>
                </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    function (context) {
        var self = this,
            connectorApiUrl  = "<?php echo $this->url('prooph.link/file_connector/api/connectors')  ?>",
            set_values = function (values) {
                self.name.value = values.name;
                self.processing_type.value = values.processing_type;
                self.file_type.value = values.metadata.file_type;
                self.readable = values.readable;
                self.writable = values.writable;
            },
            processing_type_name = function (processing_type, availableProcessingTypes) {
                var processingTypeObj = _.findWhere(availableProcessingTypes, {value : processing_type});

                return (typeof processingTypeObj !== "undefined")? processingTypeObj.label : processing_type;
            };

        this.context = context;
        this.processingTypes = context.app.processingTypes;
        this.fileTypes = context.app.fileTypes;
        this.isAutoGeneratedName = false;

        this.generateAutoNameIfPossible = function (processing_type, file_type) {
            if (_.isEmpty(processing_type)) return "";

            var name = processing_type_name(processing_type, context.app.processingTypes);

            if (! _.isEmpty(file_type)) {
                name = name + " " + file_type.toUpperCase();
            }

            name = name + " File";

            this.isAutoGeneratedName = true;

            return name;
        };

        if (context.isNew) {
            this.isNew = true;

            this.connector = {
                "id" : "",
                "name" : "",
                "processing_type" : "",

                "metadata" : {
                    "file_type" : ""
                },
                "readable" : false,
                "writable" : false
            }

            this.isAutoGeneratedName = true;
        } else {
            this.isNew = false;

            this.connector = _.find(context.app.connectors, {id : context.app.routeMatch.index});

            var autoName = this.generateAutoNameIfPossible(this.connector.processing_type, this.connector.metadata.file_type);

            this.isAutoGeneratedName = autoName == this.connector.name;
        }

        this.isValid = function () {
            if (_.isEmpty(this.processing_type.value)) return false;

            if (_.isEmpty(this.file_type.value)) return false;

            if (! this.isValidName()) return false;

            return true;
        };

        this.isValidName = function () {
            if (_.isEmpty(this.name.value)) return false;

            return ! this.isDuplicateName();
        };

        this.isDuplicateName = function () {
            if (_.isEmpty(this.name.value)) return false;

            //First check if another file connector already has the same name
            var otherC = _.find(context.app.connectors, {name : this.name.value});

            //This is our own connector
            if (! _.isEmpty(otherC) && otherC.id == this.connector.id) return false;

            //This must be another file connector
            if (! _.isEmpty(otherC)) return true;

            //Finally let's check if another system connector already uses the name
            if (_.find(context.app.systemConnectors, {name : this.name.value})) return true;

            return false;
        };



        this.syncName = function () {
            if (! this.isAutoGeneratedName) return;

            this.name.value = this.generateAutoNameIfPossible(this.processing_type.value, this.file_type.value);
        };

        this.onProcessingTypeChange = function () {
            this.syncName();
            this.update();
        };

        this.onFileTypeChange = function () {
            this.syncName();
            this.update();
        };

        this.onNameChange = function () {
            this.isAutoGeneratedName = this.name.value == this.generateAutoNameIfPossible(this.processing_type.value, this.file_type.value);
            this.update();
        };

        this.toggleReadable = function () {
            this.readable = ! this.readable;
            this.update();
        };

        this.toggleWritable = function () {
            this.writable = ! this.writable;
            this.update();
        }

        this.saveConnector = function () {
            var tmpData = {
                'processing_type' : this.processing_type.value,
                'metadata' : { file_type : this.file_type.value },
                'name' : this.name.value,
                'readable' : this.readable,
                'writable' : this.writable
            };

            if (this.isNew) {
                $.postJSON(connectorApiUrl, tmpData).then(
                    function (data) {
                        context.app.connectors.push(data);
                        riot.route('#connectors');
                    },
                    $.failNotify
                )
            } else {
                $.putJSON(connectorApiUrl + "/" + self.connector.id, tmpData).then(
                    function (data) {
                        _.merge(self.connector, data);
                        riot.route('#connectors');
                    },
                    $.failNotify
                )
            }
        }

        this.on('mount', function() {
            set_values(self.connector);
            this.update();
        });
    }
</script>